{"ast":null,"code":"var _jsxFileName = \"/Users/song-wonjeong/Desktop/react-python/workspace/src/components/Skills/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport { useLocation } from 'react-router-dom'; // import useLocation\n// 웹캠 앱 컴포넌트\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WebcamApp() {\n  _s();\n\n  // 웹캠 참조 설정\n  const location = useLocation(); // add this line\n\n  const {\n    selectedObject,\n    objectCount,\n    shootingInterval,\n    detectionMode\n  } = location.state.settings; // add this line\n\n  const webcamRef = useRef(null); // 촬영 상태 표시 (빨간색: 촬영 중, 초록색: 촬영 완료)\n\n  const [indicatorColor, setIndicatorColor] = useState('red'); // 인터넷 연결 상태 확인\n\n  const [isOnline, setIsOnline] = useState(navigator.onLine); // 감지된 객체 수\n\n  const [detectedCount, setDetectedCount] = useState(0); // 서버 요청 진행 상태\n\n  const [isRequestInProgress, setIsRequestInProgress] = useState(false); // 이미지 저장 함수\n\n  const saveImageFunction = useCallback(() => {\n    const link = document.createElement('a');\n    link.href = webcamRef.current.getScreenshot();\n    link.download = `capture_${Date.now()}.jpg`;\n    link.click();\n  }, [webcamRef]); // 서버에 이미지 전송 및 객체 감지 함수\n\n  const sendImageToServer = useCallback(async () => {\n    if (!webcamRef.current || isRequestInProgress) {\n      return;\n    }\n\n    const imageSrc = webcamRef.current.getScreenshot();\n\n    if (!imageSrc) {\n      return;\n    }\n\n    setIsRequestInProgress(true);\n    const formData = new FormData();\n    formData.append('image', imageSrc);\n\n    try {\n      let response = await fetch(\"http://localhost:8000/detect\", {\n        method: \"POST\",\n        body: formData\n      });\n      let data = await response.json();\n      const detectedObjects = data.detected_objects;\n      const objectOccurrences = detectedObjects.filter(obj => obj === selectedObject).length;\n      setDetectedCount(objectOccurrences); // 감지 모드에 따른 이미지 저장 조건\n\n      if (detectionMode === \"above\" && objectOccurrences >= objectCount) {\n        saveImageFunction();\n        setIndicatorColor('green');\n      } else if (detectionMode === \"below\" && objectOccurrences <= objectCount) {\n        saveImageFunction();\n        setIndicatorColor('green');\n      } else if (detectionMode === \"fix\" && objectOccurrences === objectCount) {\n        saveImageFunction();\n        setIndicatorColor('green');\n      } else {\n        setIndicatorColor('red');\n      }\n    } catch (error) {\n      console.error(\"Error sending image to server: \", error);\n    } finally {\n      setIsRequestInProgress(false);\n    }\n  }, [selectedObject, objectCount, detectionMode, saveImageFunction]); // 촬영 간격에 따른 이미지 전송 간격 설정\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      sendImageToServer();\n    }, shootingInterval * 1000);\n    return () => clearInterval(interval);\n  }, [shootingInterval, sendImageToServer]); // 인터넷 연결 상태 감지 이벤트 설정\n\n  useEffect(() => {\n    window.addEventListener('online', () => setIsOnline(true));\n    window.addEventListener('offline', () => setIsOnline(false));\n    return () => {\n      window.removeEventListener('online', () => setIsOnline(true));\n      window.removeEventListener('offline', () => setIsOnline(false));\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      maxWidth: '800px',\n      margin: '0 auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      style: {\n        width: '100%',\n        height: 'auto'\n      },\n      videoConstraints: {\n        deviceId: 0,\n        width: 800,\n        height: 600\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10,\n        width: 30,\n        height: 30,\n        borderRadius: '50%',\n        backgroundColor: indicatorColor\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), !isOnline && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red',\n        textAlign: 'center'\n      },\n      children: \"No internet connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [\"Detected \", selectedObject, \"s: \", detectedCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WebcamApp, \"qnPYPlWoQXzqjVJlCavCnbG/Trg=\", false, function () {\n  return [useLocation];\n});\n\n_c = WebcamApp;\nexport default WebcamApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebcamApp\");","map":{"version":3,"sources":["/Users/song-wonjeong/Desktop/react-python/workspace/src/components/Skills/index.js"],"names":["React","useRef","useEffect","useCallback","useState","Webcam","useLocation","WebcamApp","location","selectedObject","objectCount","shootingInterval","detectionMode","state","settings","webcamRef","indicatorColor","setIndicatorColor","isOnline","setIsOnline","navigator","onLine","detectedCount","setDetectedCount","isRequestInProgress","setIsRequestInProgress","saveImageFunction","link","document","createElement","href","current","getScreenshot","download","Date","now","click","sendImageToServer","imageSrc","formData","FormData","append","response","fetch","method","body","data","json","detectedObjects","detected_objects","objectOccurrences","filter","obj","length","error","console","interval","setInterval","clearInterval","window","addEventListener","removeEventListener","position","width","maxWidth","margin","height","deviceId","top","right","borderRadius","backgroundColor","color","textAlign"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\nimport Webcam from 'react-webcam';\nimport { useLocation } from 'react-router-dom'; // import useLocation\n// 웹캠 앱 컴포넌트\nfunction WebcamApp() {\n    // 웹캠 참조 설정\n    const location = useLocation(); // add this line\n    const { selectedObject, objectCount, shootingInterval, detectionMode } = location.state.settings; // add this line\n\n    const webcamRef = useRef(null);\n    // 촬영 상태 표시 (빨간색: 촬영 중, 초록색: 촬영 완료)\n    const [indicatorColor, setIndicatorColor] = useState('red');\n    // 인터넷 연결 상태 확인\n    const [isOnline, setIsOnline] = useState(navigator.onLine);\n    // 감지된 객체 수\n    const [detectedCount, setDetectedCount] = useState(0);\n    // 서버 요청 진행 상태\n    const [isRequestInProgress, setIsRequestInProgress] = useState(false);\n\n    // 이미지 저장 함수\n    const saveImageFunction = useCallback(() => {\n        const link = document.createElement('a');\n        link.href = webcamRef.current.getScreenshot();\n        link.download = `capture_${Date.now()}.jpg`;\n        link.click();\n    }, [webcamRef]);\n\n    // 서버에 이미지 전송 및 객체 감지 함수\n    const sendImageToServer = useCallback(async () => {\n        if (!webcamRef.current || isRequestInProgress) {\n            return;\n        }\n\n        const imageSrc = webcamRef.current.getScreenshot();\n        if (!imageSrc) {\n            return;\n        }\n\n        setIsRequestInProgress(true);\n\n        const formData = new FormData();\n        formData.append('image', imageSrc);\n\n        try {\n            let response = await fetch(\"http://localhost:8000/detect\", {\n                method: \"POST\",\n                body: formData\n            });\n            let data = await response.json();\n            const detectedObjects = data.detected_objects;\n            const objectOccurrences = detectedObjects.filter(obj => obj === selectedObject).length;\n            setDetectedCount(objectOccurrences);\n\n            // 감지 모드에 따른 이미지 저장 조건\n            if (detectionMode === \"above\" && objectOccurrences >= objectCount) {\n                saveImageFunction();\n                setIndicatorColor('green');\n            } else if (detectionMode === \"below\" && objectOccurrences <= objectCount) {\n                saveImageFunction();\n                setIndicatorColor('green');\n            } else if (detectionMode === \"fix\" && objectOccurrences === objectCount) {\n                saveImageFunction();\n                setIndicatorColor('green');\n            } else {\n                setIndicatorColor('red');\n            }\n        } catch (error) {\n            console.error(\"Error sending image to server: \", error);\n        } finally {\n            setIsRequestInProgress(false);\n        }\n    }, [selectedObject, objectCount, detectionMode, saveImageFunction]);\n\n    // 촬영 간격에 따른 이미지 전송 간격 설정\n    useEffect(() => {\n        const interval = setInterval(() => {\n            sendImageToServer();\n        }, shootingInterval * 1000);\n\n        return () => clearInterval(interval);\n    }, [shootingInterval, sendImageToServer]);\n\n    // 인터넷 연결 상태 감지 이벤트 설정\n    useEffect(() => {\n        window.addEventListener('online', () => setIsOnline(true));\n        window.addEventListener('offline', () => setIsOnline(false));\n        return () => {\n            window.removeEventListener('online', () => setIsOnline(true));\n            window.removeEventListener('offline', () => setIsOnline(false));\n        };\n    }, []);\n\n    return (\n        <div style={{ position: 'relative', width: '100%', maxWidth: '800px', margin: '0 auto' }}>\n            <Webcam \n                ref={webcamRef} \n                screenshotFormat=\"image/jpeg\"\n                style={{ width: '100%', height: 'auto' }}\n                videoConstraints={{ deviceId: 0, width: 800, height: 600 }}\n            />\n            <div style={{ position: 'absolute', top: 10, right: 10, width: 30, height: 30, borderRadius: '50%', backgroundColor: indicatorColor }}></div>\n            {!isOnline && <p style={{ color: 'red', textAlign: 'center' }}>No internet connection</p>}\n            <p style={{ textAlign: 'center' }}>Detected {selectedObject}s: {detectedCount}</p>\n        </div>\n    );\n}\n\nexport default WebcamApp;\n"]},"metadata":{},"sourceType":"module"}